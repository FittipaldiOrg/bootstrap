name: Create Project

on:
  pull_request:
    types: [ closed ]

jobs:
  create_project:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
      repository-projects: write

    steps:
      - name: Check if PR was merged into main
        run: |
          if [[ "${{ github.event.pull_request.base.ref }}" != "main" ]]; then
            echo "PR not merged into main. Exiting."
            exit 0
          fi
          if [[ "${{ github.event.pull_request.merged }}" != "true" ]]; then
            echo "PR was not merged. Exiting."
            exit 0
          fi

      - name: Checkout bootstrap repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          path: bootstrap

      - name: Install yq
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          chmod +x /usr/local/bin/yq

      - name: Find added YAML files
        id: find_yaml
        run: |
          cd bootstrap
          FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.merge_commit_sha }} -- . :^.github | grep '\.yaml$' || true)
          
          if [[ -z "$FILES" ]]; then
            echo "No YAML files changed. Exiting."
            exit 1
          fi
          
          echo "Changed files:"
          echo "$FILES"
          echo "CHANGED_FILES=$FILES" >> $GITHUB_ENV

      - name: Extract service.name from YAML
        id: extract_service_name
        run: |
          for FILE in ${{ env.CHANGED_FILES }}; do
            echo "Processing: $FILE"
            SERVICE_NAME=$(yq e '.service.name' "bootstrap/$FILE" 2>/dev/null || echo "")

            if [[ -n "$SERVICE_NAME" ]]; then
              echo "Extracted Service Name: $SERVICE_NAME"
              echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV
              exit 0  # Stop at the first valid service name
            fi
          done

          echo "No valid service name found in YAML files. Exiting."
          exit 1

      - name: Debug extracted service name
        run: |
          echo "Extracted Service Name: ${{ env.SERVICE_NAME }}"

      - name: Create new repository for the new service
        run: |
          echo "Creating repository: ${{ env.SERVICE_NAME }}"
          
          RESPONSE=$(curl -s -w "%{http_code}" -o response.json \
            -X POST https://api.github.com/orgs/FittipaldiOrg/repos \
            -H "Authorization: token ${{ secrets.ORG_PAT }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d '{
              "name": "'"$SERVICE_NAME"'",
              "description": "Repository created from template",
              "private": false
            }')
          
          HTTP_STATUS="${RESPONSE: -3}"  # Extracts last 3 characters (status code)
          
          echo "GitHub API Response:"
          cat response.json  # Print full API response for debugging
          
          echo "HTTP Status: $HTTP_STATUS"
          
          if [[ "$HTTP_STATUS" != "200" && "$HTTP_STATUS" != "201" ]]; then
            echo "Failed to create repository. HTTP Status: $HTTP_STATUS"
            exit 1
          fi

      - name: Clone template repository
        run: |
          git clone --depth=1 https://github.com/FittipaldiOrg/template.git template-repo
          cd template-repo
          sh setup.sh --service_name "${{ env.SERVICE_NAME }}"
          rm -rf .git  # Remove old git history

      - name: Push template code to new repository
        run: |
          cd template-repo
          git init
          git config --global user.email "github-actions@github.com"
          git config --global user.name "github-actions"
          git remote add origin https://x-access-token:${{ secrets.ORG_PAT }}@github.com/FittipaldiOrg/${{ env.SERVICE_NAME }}.git
          git add .
          git commit -m "Initialize repository from template"
          git branch -M main
          git push -u origin main

