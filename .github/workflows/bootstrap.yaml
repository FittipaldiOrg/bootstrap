name: Create Project

on:
  pull_request:
    types: [ closed ]

jobs:
  create_project:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
      repository-projects: write

    steps:
      - name: Check branch name
        run: |
          if [[ "${{ github.event.pull_request.base.ref }}" != "main" ]]; then
            echo "PR not merged into main. Exiting workflow."
            exit 1
          fi

      - name: Check if PR is merged
        run: |
          if [ "${{ github.event.pull_request.merged }}" != "true" ]; then
            echo "PR not merged. Exiting."
            exit 1
          fi

      - name: Checkout bootstrap repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          path: bootstrap

      - name: Install yq
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          chmod +x /usr/local/bin/yq

      - name: Find added YAML files
        id: find_yaml
        run: |
          cd bootstrap
          files=$(git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.merge_commit_sha }} -- . :^.github | grep '\.yaml$' || true)

          if [[ -n "$files" ]]; then
            echo "changed_files<<EOF" >> $GITHUB_ENV
            echo "$files" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi

      - name: Extract service.name from YAML files
        id: extract_service_name
        run: |
          for file in ${{ env.changed_files }}; do
            echo "Processing: $file"
            service_name=$(yq e '.service.name' "bootstrap/$file")
            echo "Service Name: $service_name"
            echo "SERVICE_NAME=$service_name" >> $GITHUB_ENV
          done

      - name: Print extracted service names
        run: |
          echo "Extracted Service Name: $SERVICE_NAME"

      - name: Create new repository from template
        run: |
          curl -X POST https://api.github.com/orgs/FittipaldiOrg/repos \
          -H "Authorization: token ${{ secrets.ORG_PAT }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -d '{
            "name": "'"$SERVICE_NAME"'",
            "description": "Repository created from template",
            "private": false,
            "template_repository": "FittipaldiOrg/template"
          }'
